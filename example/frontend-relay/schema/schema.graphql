type Query {
  viewer: User

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type User implements Node {
  """The ID of an object"""
  id: ID!

  """The name of the user."""
  name: String
  robots(after: String, first: Int, before: String, last: Int): RobotConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type RobotConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RobotEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type RobotEdge {
  """The item at the end of the edge"""
  node: Robot

  """A cursor for use in pagination"""
  cursor: String!
}

type Robot implements Node {
  """The ID of an object"""
  id: ID!

  """The name of the robot."""
  name: String
}

type Mutation {
  addRobot(input: AddRobotInput!): AddRobotPayload
  updateRobot(input: UpdateRobotInput!): UpdateRobotPayload
  removeRobot(input: RemoveRobotInput!): RemoveRobotPayload
}

type AddRobotPayload {
  robot: Robot
  clientMutationId: String
}

input AddRobotInput {
  robotName: String!
  userId: ID!
  clientMutationId: String
}

type UpdateRobotPayload {
  robot: Robot
  clientMutationId: String
}

input UpdateRobotInput {
  newRobotName: String!
  robotId: ID!
  clientMutationId: String
}

type RemoveRobotPayload {
  robot: Robot
  clientMutationId: String
}

input RemoveRobotInput {
  robotId: String!
  userId: ID!
  clientMutationId: String
}
